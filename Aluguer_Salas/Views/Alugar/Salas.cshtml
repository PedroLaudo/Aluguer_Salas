@* Views/Alugar/Salas.cshtml *@
@model IEnumerable<Aluguer_Salas.Models.Sala>
@{
    ViewData["Title"] = "Salas para Alugar";
}

<h1>@ViewData["Title"]</h1>

@* CORRIGIDO AQUI: Usa-se Model diretamente, e não Model.ListaSalas *@
@if (Model != null && Model.Any())
{
    <table class="table table-striped table-hover">
        <thead class="table-light">
            <tr>
                @* Para DisplayNameFor, esta forma com FirstOrDefault() continua correta para inferir o tipo *@
                <th>@Html.DisplayNameFor(model => model.FirstOrDefault().NomeSala)</th>
                <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Capacidade)</th>
                <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Descricao)</th>
                <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Disponivel)</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @* CORRIGIDO AQUI: Itera sobre 'Model', que é a coleção *@
            @foreach (var sala in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => sala.NomeSala)</td>
                    <td>@Html.DisplayFor(modelItem => sala.Capacidade)</td>
                    <td>@Html.DisplayFor(modelItem => sala.Descricao)</td>
                    <td>
                        @if (sala.Disponivel)
                        {
                            <span class="badge bg-success">Disponível</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Indisponível</span>
                        }
                    </td>
                    <td>
                        @* Links para futuras funcionalidades *@
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>De momento, não existem salas para apresentar.</p>
}